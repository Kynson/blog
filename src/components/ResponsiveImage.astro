---
interface Props {
  src: string,
  alt: string,
  intrinsicWidth: number,
  intrinsicHeight: number,
  blurHash: string,
  sizes: string,
  loading?: 'lazy' | 'eager',
  zoomOnHover?: boolean,
}

const {
  src,
  alt,
  intrinsicWidth,
  intrinsicHeight,
  blurHash,
  sizes,
  loading = 'lazy',
  zoomOnHover = false,
} = Astro.props;

const defaultSizeVarients = [intrinsicWidth, 640, 750, 828, 1400];

// Filter all sizes that is bigger than the original image width to prevent upscaling
const sizeVarients: number[] = defaultSizeVarients
  .filter((sizeVarient) => {
    return sizeVarient <= intrinsicWidth
  });

const aspectRatio = intrinsicWidth / intrinsicHeight;

const baseUrl = `${src}?auto=format&fit=fill`;

let srcSet = '';
sizeVarients.forEach((size) => {
  srcSet += `${baseUrl}&w=${size} ${size}w,`
});
---

<!-- ResponsiveImage content -->
<responsive-image blurhash={blurHash}>
  <canvas width="64" height={`${64 / aspectRatio}`}></canvas>
  <img
    src={baseUrl}
  
    srcset={srcSet}
    sizes={sizes}

    width={intrinsicWidth}
    height={intrinsicHeight}
  
    alt={alt}
    loading={loading}

    class:list={zoomOnHover ? 'zoom-on-hover' : ''}
    />

    <div class="svg-container">
      <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z"/>
      </svg>
    </div>    
</image>

<!-- ResponsiveImage styles -->
<style define:vars={{ 'image-aspect-ratio': aspectRatio, 'image-width': `${intrinsicWidth}px` }}>
  responsive-image {
    max-width: var(--image-width);
    aspect-ratio: var(--image-aspect-ratio); 
    display: block;
    position: relative;
    background-color: color-mix(in srgb, var(--background-color), #fff 5%);
  }

  :root.light responsive-image {
    background-color: color-mix(in srgb, var(--background-color), #000 5%);
  }

  responsive-image, img, canvas {
    border-radius: 8px;
  }

  img {
    top: 0;
    max-width: 100%;
    height: auto;
    position: absolute;
  }

  img.zoom-on-hover {
    transition: transform .1s ease-in-out;
  }

  img.loading {
    display: none;
  }

  img.zoom-on-hover:hover {
    transform: scale(1.005);
  }

  canvas {
    top: 0;
    width: 100%;
    height: 100%;
    z-index: 2;
    position: absolute;
  }

  canvas.hidden {
    display: none;
  }

  .svg-container {
    width: 100%;
    height: 100%;
    display: flex;
  }

  .svg-container > svg {
    width: 4rem;
    margin: auto;
  }

  @media (prefers-reduced-motion) {
    /* Remove the transformation */
    img.zoom-on-hover:hover {
      transform: none;
    }
  }
</style>

<!-- ResponsiveImage logics -->
<script>
  import { decode } from 'blurhash';

  class ResponsiveImage extends HTMLElement {
    canvas: HTMLCanvasElement;
    image: HTMLImageElement;

    constructor() {
      super();
    }

    #loadHandler() {
      this.canvas.classList.add('hidden');
    }

    connectedCallback() {
      this.canvas = this.querySelector('canvas');
      this.image = this.querySelector('img');

      // The image has already loaded, no need to decode the blurhash
      if (this.image.complete) {
        // Manually call load handler as the load event will not fire when the image is cached on Chrome
        this.#loadHandler();

        return;
      }

      this.image.addEventListener('load', this.#loadHandler.bind(this));

      const blurHash = this.getAttribute('blurhash');
      const decodedPixels = decode(blurHash, 64, 64);

      const canvasContext = this.canvas.getContext('2d');

      const imageData = canvasContext.createImageData(64, 64);
      imageData.data.set(decodedPixels);

      canvasContext.putImageData(imageData, 0, 0);
    }

  }

  customElements.define('responsive-image', ResponsiveImage);
</script>