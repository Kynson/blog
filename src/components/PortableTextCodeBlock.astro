---
interface Props {
  node: CodeBlock,
}

import IconButton from './IconButton.astro';
// import { Code } from 'astro:components';
import Code from './Code.astro';

const { node: codeBlockNode } = Astro.props;
const { language, code } = codeBlockNode;
---

<!-- PortableTextCodeBlock content -->
<portable-text-code-block>
  <div class="header">
    <span class="low-emphesis small-text language-name">{language}</span>
    <IconButton d="M15.75 17.25v3.375c0 .621-.504 1.125-1.125 1.125h-9.75a1.125 1.125 0 0 1-1.125-1.125V7.875c0-.621.504-1.125 1.125-1.125H6.75a9.06 9.06 0 0 1 1.5.124m7.5 10.376h3.375c.621 0 1.125-.504 1.125-1.125V11.25c0-4.46-3.243-8.161-7.5-8.876a9.06 9.06 0 0 0-1.5-.124H9.375c-.621 0-1.125.504-1.125 1.125v3.5m7.5 10.375H9.375a1.125 1.125 0 0 1-1.125-1.125v-9.25m12 6.625v-1.875a3.375 3.375 0 0 0-3.375-3.375h-1.5a1.125 1.125 0 0 1-1.125-1.125v-1.5a3.375 3.375 0 0 0-3.375-3.375H9.75"></IconButton>
  </div>
  <!-- <div class="dark-theme-container"> -->
  <Code lang={language} code={code}></Code>
  <!-- </div> -->
  <!-- <div class="light-theme-container">
    <Code lang={language} code={code}></Code>
  </div> -->
</portable-text-code-block>

<!-- PortableTextCodeBlock styles -->
<style>
  portable-text-code-block {
    display: block;
    position: relative;
    background-color: #282c34;
    border-radius: 8px;
    padding: 0.5rem 1rem;
    margin: 1.5rem 0;
  }

  .header {
    display: flex;
    flex-direction: row;
    justify-content: space-between;
  }

  .language-name {
    margin: auto 0;
  }

  :root.light portable-text-code-block {
    background-color: #fff;
  }

  /* :root .light-theme-container {
    display: none;
  }

  :root.light .dark-theme-container {
    display: none;
  }

  :root.light .light-theme-container {
    display: block;
  } */
</style>

<!-- PortableTextCodeBlock logics -->
<script>
  import { delay } from '../scripts/utils';

  class PortableTextCodeBlock extends HTMLElement {
    static CHECK_ICON = 'm4.5 12.75 6 6 9-13.5';

    copyButton: IconButton;
    codeElement: HTMLElement;

    constructor() {
      super();
    }

    async #copyHandler() {
      const code = this.codeElement.textContent;

      const initialIcon = this.copyButton.getIcon();
      this.copyButton.setIcon(PortableTextCodeBlock.CHECK_ICON);
      // Temporary make IconButton behave like an icon
      this.copyButton.inert = true;

      await navigator.clipboard.writeText(code);

      await delay(1000);

      this.copyButton.setIcon(initialIcon);
      this.copyButton.inert = false;
    }

    connectedCallback() {
      // Selecting IconButton using its custom element tag
      this.copyButton = this.querySelector('icon-button');
      // <Code> renders a <pre> tag containing the code
      this.codeElement = this.querySelector('pre');

      this.copyButton.addEventListener('click', this.#copyHandler.bind(this));
    }
  }

  customElements.define('portable-text-code-block', PortableTextCodeBlock);
</script>